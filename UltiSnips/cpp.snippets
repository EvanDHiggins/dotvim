## Class
# class
snippet cl
class ${1:`vim_snippets#Filename('$1', 'name')`}
{
public:
	$1(${2});
	~$1();

private:
	${0:/* data */}
};
endsnippet
# member function implementation
snippet mfun
${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${0}
}
endsnippet
## Input/Output
# std::cout
snippet cout
std::cout << ${1} << std::endl;
endsnippet
# std::cin
snippet cin
std::cin >> ${1};
endsnippet
##
## Iteration
# for i
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}
endsnippet
# iterator
snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

# auto iterator
snippet itera
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet
##
## Lambdas
# lamda (one line)
snippet ld
[${1}](${2}){${3}}
endsnippet
# lambda (multi-line)
snippet lld
[${1}](${2}){
	${3}
}
endsnippet

snippet main
int main(int argc, char** argv) {
    ${0}
    return 0;
}
endsnippet

snippet head*
// File: ${1}
// ${2:Description}
// --------------------------------------------------------
// Class: CS 470                      Instructor: Dr. Hwang
// Assignment: Process Scheduling     Date Assigned: 22 February 2016
// Programmer: Evan Higgins           Date Completed: 18 March 2016
endsnippet

snippet inc
#include <${1}>${0}
endsnippet

snippet Inc
#include "${1}.hpp"${0}
endsnippet

snippet fun*
// ============================================================
// Function: ${1}
// Returns:  ${2}
//
// Preconditions
// ${3:Assumptions about the state or values of the received parameters}
//
// ${4:Description of what the function does in terms of the received parameters}
// ============================================================
endsnippet

snippet start
#include <iostream>

int main(int argc, char** argv) {
    ${0}
    return 0;
}
endsnippet

snippet deb
std::cerr << "[DEBUG] statement ${1}" << std::endl;
endsnippet

snippet ifndef
#ifndef ${1}_H
#define $1_H

${0}

#endif //$1_H
endsnippet

snippet /fun
// end ${0}
endsnippet

snippet dbv
std::cerr << "${1} = " << $1 << std::endl;
endsnippet

snippet vec
std::vector<int> ${1} = {${2}};
${0}
endsnippet
